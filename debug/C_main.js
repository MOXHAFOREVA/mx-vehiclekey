/*! For license information please see C_main.js.LICENSE.txt */
(()=>{"use strict";var __webpack_modules__={"./src/client/client.ts":function(__unused_webpack_module,exports,__webpack_require__){eval("\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n});\r\nvar __importStar = (this && this.__importStar) || function (mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n};\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst s_lb_1 = __webpack_require__(/*! ../server/s_lb */ \"./src/server/s_lb.ts\");\r\nconst config = __importStar(__webpack_require__(/*! ../server/config.json */ \"./src/server/config.json\"));\r\nlet ESX, HotwireVeh = [];\r\nemit('esx:getSharedObject', obj => (ESX = obj));\r\nonNet('mx-vehiclekey:SpawnVehicles', (data) => __awaiter(void 0, void 0, void 0, function* () {\r\n    let spawnedlist = [], vehicle, veh_coords, veh_data, net_id;\r\n    for (let i = 0; i < data.length; i++) {\r\n        veh_coords = data[i].veh_data.coords;\r\n        veh_data = data[i].veh_data;\r\n        if (!(yield HasCreatedVehicle(veh_data.props.plate))) {\r\n            if (!HasModelLoaded(veh_data.props.model) && IsModelInCdimage(veh_data.props.model)) {\r\n                RequestModel(veh_data.props.model);\r\n                while (!HasModelLoaded(veh_data.props.model)) {\r\n                    yield (0, s_lb_1.Wait)(100);\r\n                }\r\n            }\r\n            vehicle = CreateVehicle(veh_data.props.model, veh_coords.x, veh_coords.y, veh_coords.z, veh_coords.h || veh_coords.w, true, false);\r\n            ESX.Game.SetVehicleProperties(vehicle, veh_data.props);\r\n            SetEntityAsMissionEntity(vehicle, true, true);\r\n            NetworkRegisterEntityAsNetworked(vehicle);\r\n            net_id = VehToNet(vehicle);\r\n            SetNetworkIdExistsOnAllMachines(net_id, true);\r\n            NetworkSetNetworkIdDynamic(net_id, false);\r\n            SetVehicleDoorsLocked(vehicle, 2);\r\n            SetVehicleEngineOn(vehicle, false, true, true);\r\n            SetModelAsNoLongerNeeded(veh_data.props.model);\r\n            spawnedlist.push({ veh_data });\r\n            if (veh_data.impound) {\r\n                SetVehicleEngineHealth(vehicle, 1000);\r\n                SetVehicleBodyHealth(vehicle, 1000.0);\r\n                ESX.Game.SetVehicleProperties(vehicle, ESX.Game.GetVehicleProperties(vehicle));\r\n            }\r\n        }\r\n    }\r\n    emitNet('mx-vehiclekey:SpawnedVehicles', spawnedlist);\r\n}));\r\nsetTick(() => __awaiter(void 0, void 0, void 0, function* () {\r\n    let sleep = 2000;\r\n    const ped = PlayerPedId();\r\n    const veh = GetVehiclePedIsIn(ped, false);\r\n    if (IsPedInAnyVehicle(ped, false)) {\r\n        sleep = 3;\r\n        if (GetIsVehicleEngineRunning(veh) == false) {\r\n            ESX.ShowHelpNotification('If you have a key ~r~use it~s~, if not type ~r~/hotwire~s~ for hotwire.');\r\n        }\r\n    }\r\n    yield (0, s_lb_1.Wait)(sleep);\r\n}));\r\nonNet(\"gameEventTriggered\", function (name, args) {\r\n    if (name == \"CEventNetworkVehicleUndrivable\") {\r\n        const entity = args[0];\r\n        if (DoesEntityExist(entity) && GetVehicleNumberPlateText(entity)) {\r\n            TriggerServerEvent('mx-vehiclekey:DestroyVehicle', GetVehicleNumberPlateText(entity));\r\n            DeleteEntity(entity);\r\n        }\r\n    }\r\n});\r\nsetTick(() => __awaiter(void 0, void 0, void 0, function* () {\r\n    yield (0, s_lb_1.Wait)(1250);\r\n    const veh = GetVehiclePedIsIn(PlayerPedId(), false);\r\n    const plate = GetVehicleNumberPlateText(veh);\r\n    if (veh != 0 && DoesEntityExist(veh) && plate) {\r\n        if (!HotwireVeh[plate]) {\r\n            SetVehicleEngineOn(veh, false, true, true);\r\n            HotwireVeh[plate] = true;\r\n        }\r\n    }\r\n}));\r\nsetImmediate(() => {\r\n    emit('chat:addSuggestion', '/givecar', \"Give Car\", [\r\n        { name: \"playerid\", help: \"The user id you want to give the key to\" }\r\n    ]);\r\n    emit('chat:addSuggestion', '/hotwire', \"Hotwire Car\");\r\n    emit('chat:addSuggestion', '/impound', \"Impound Car\");\r\n});\r\nRegisterCommand('givecar', (source, args) => __awaiter(void 0, void 0, void 0, function* () {\r\n    const ped = PlayerPedId();\r\n    const veh = GetVehiclePedIsIn(ped, false);\r\n    if (args[0]) {\r\n        if (veh != 0) {\r\n            emitNet('mx-vehiclekey:GiveCar', args[0], GetVehicleNumberPlateText(veh));\r\n        }\r\n        else {\r\n            const vehicle = yield ClosestVehicle(5);\r\n            if (vehicle) {\r\n                emitNet('mx-vehiclekey:GiveCar', args[0], GetVehicleNumberPlateText(vehicle));\r\n            }\r\n            else {\r\n                ESX.ShowNotification('No vehicles nearby. ');\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        ESX.ShowNotification('Usage: /givecar playerid');\r\n    }\r\n}), false);\r\nRegisterCommand('impound', (source, args) => __awaiter(void 0, void 0, void 0, function* () {\r\n    const ped = PlayerPedId();\r\n    const veh = GetVehiclePedIsIn(ped, false);\r\n    if (yield ImpoundAccess()) {\r\n        if (veh != 0) {\r\n            emitNet('mx-vehiclekey:DestroyVehicle', GetVehicleNumberPlateText(veh));\r\n            DeleteEntity(veh);\r\n            ESX.ShowNotification(\"The vehicle has been impounded.\");\r\n        }\r\n        else {\r\n            const vehicle = yield ClosestVehicle(5);\r\n            if (vehicle) {\r\n                emitNet('mx-vehiclekey:DestroyVehicle', GetVehicleNumberPlateText(vehicle));\r\n                DeleteEntity(vehicle);\r\n                ESX.ShowNotification(\"The vehicle has been impounded.\");\r\n            }\r\n            else {\r\n                ESX.ShowNotification('No vehicles nearby. ');\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        ESX.ShowNotification(\"You are not authorized to use this command.\");\r\n    }\r\n}), false);\r\nRegisterCommand('hotwire', (source, args) => __awaiter(void 0, void 0, void 0, function* () {\r\n    const ped = PlayerPedId();\r\n    const veh = GetVehiclePedIsIn(ped, false);\r\n    if (IsPedInAnyVehicle(ped, false)) {\r\n        if (GetIsVehicleEngineRunning(veh) == false) {\r\n            // ur hotwire event...\r\n            ESX.ShowNotification('hotwire in progress');\r\n            yield (0, s_lb_1.Wait)(1500);\r\n            ESX.ShowNotification('hotwire successful');\r\n            SetVehicleEngineOn(veh, true, true, true);\r\n        }\r\n        else {\r\n            ESX.ShowNotification('The engine of the vehicle is already on.');\r\n        }\r\n    }\r\n    else {\r\n        ESX.ShowNotification('You are not in a vehicle.');\r\n    }\r\n}), false);\r\nconst ImpoundAccess = () => __awaiter(void 0, void 0, void 0, function* () {\r\n    const job = ESX.GetPlayerData().job.name;\r\n    for (const access in config['impound_perm']) {\r\n        if (config['impound_perm'][access] === job) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n});\r\nconst ShowFloatingHelpNotification = function (msg, coords) {\r\n    AddTextEntry('ShowFloatingHelpNotification', msg);\r\n    SetFloatingHelpTextWorldPosition(1, coords.x, coords.y, coords.z);\r\n    SetFloatingHelpTextStyle(1, 1, 2, -1, 3, 0);\r\n    BeginTextCommandDisplayHelp('ShowFloatingHelpNotification');\r\n    EndTextCommandDisplayHelp(2, false, false, -1);\r\n};\r\nsetTick(() => __awaiter(void 0, void 0, void 0, function* () {\r\n    let sleep = 1250;\r\n    if (ESX) {\r\n        const ped = PlayerPedId();\r\n        const dst = yield (0, s_lb_1.CalculateDistance)(yield (0, s_lb_1.ArrayToVec3)(GetEntityCoords(ped, true)), { x: 408.95, y: -1622.81, z: 29.29 });\r\n        if (dst <= 3) {\r\n            sleep = 3;\r\n            ShowFloatingHelpNotification('~r~E~s~ Create a new key', { x: 408.95, y: -1622.81, z: 29.29 });\r\n            if (IsControlJustPressed(0, 38)) {\r\n                ESX.UI.Menu.CloseAll();\r\n                let el = [];\r\n                ESX.TriggerServerCallback('mx-vehiclekey:GetMyVehicles', (handle) => __awaiter(void 0, void 0, void 0, function* () {\r\n                    if (handle) {\r\n                        for (let test of handle) {\r\n                            el.push({\r\n                                label: `${test.plate} Key extraction fee $6000`,\r\n                                plate: test.plate\r\n                            });\r\n                        }\r\n                        ESX.UI.Menu.Open('default', GetCurrentResourceName(), 'takevehiclekey', {\r\n                            title: 'Create a new key',\r\n                            elements: el\r\n                        }, function (data, menu) {\r\n                            ESX.UI.Menu.CloseAll();\r\n                            emitNet('mx-vehiclekey:CreateNewKey', { plate: data.current.plate });\r\n                        }, function (data, menu) {\r\n                            menu.close();\r\n                        });\r\n                    }\r\n                    else {\r\n                        return ESX.ShowNotification(\"You don't own a vehicle.\");\r\n                    }\r\n                }));\r\n            }\r\n        }\r\n    }\r\n    yield (0, s_lb_1.Wait)(sleep);\r\n}));\r\nconst HasCreatedVehicle = (plate) => __awaiter(void 0, void 0, void 0, function* () {\r\n    const vehicles = ESX.Game.GetVehicles();\r\n    for (let h = 0; h < vehicles.length; h++) {\r\n        if (DoesEntityExist(vehicles[h])) {\r\n            if ((0, s_lb_1.SplitSpaces)(GetVehicleNumberPlateText(vehicles[h])) === (0, s_lb_1.SplitSpaces)(plate)) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n});\r\nconst ClosestVehicle = (distance) => __awaiter(void 0, void 0, void 0, function* () {\r\n    const vehicles = ESX.Game.GetVehicles();\r\n    for (let h = 0; h < vehicles.length; h++) {\r\n        if (DoesEntityExist(vehicles[h])) {\r\n            if ((yield (0, s_lb_1.CalculateDistance)(yield (0, s_lb_1.ArrayToVec3)(GetEntityCoords(PlayerPedId(), true)), (0, s_lb_1.ArrayToVec3)(GetEntityCoords(vehicles[h], false)))) <= distance) {\r\n                return vehicles[h];\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n});\r\nsetTick(() => __awaiter(void 0, void 0, void 0, function* () {\r\n    let sleep = 2000;\r\n    if (ESX) {\r\n        const pedcoords = GetEntityCoords(PlayerPedId(), true);\r\n        const dst = yield (0, s_lb_1.CalculateDistance)(yield (0, s_lb_1.ArrayToVec3)(pedcoords), { x: 483.75, y: -1312.15, z: 29.21 });\r\n        if (dst <= 4) {\r\n            sleep = 3;\r\n            ShowFloatingHelpNotification('~r~E~s~ Impounds', { x: 483.75, y: -1312.15, z: 29.21 });\r\n            if (IsControlJustPressed(0, 38)) {\r\n                ESX.UI.Menu.CloseAll();\r\n                let el = [];\r\n                ESX.TriggerServerCallback('mx-vehiclekey:GetImpounds', function (handle) {\r\n                    if (handle) {\r\n                        for (const impound_data of handle) {\r\n                            impound_data.vehicle = (0, s_lb_1.IsJson)(impound_data.vehicle) && JSON.parse(impound_data.vehicle) || impound_data.vehicle;\r\n                            el.push({\r\n                                label: (`${impound_data.vehicle.plate} You have to pay $250 to get the vehicle.`),\r\n                                plate: impound_data.vehicle.plate,\r\n                                props: impound_data.vehicle\r\n                            });\r\n                        }\r\n                        ESX.UI.Menu.Open('default', GetCurrentResourceName(), 'impound', {\r\n                            title: 'Impound',\r\n                            elements: el\r\n                        }, function (data, menu) {\r\n                            ESX.UI.Menu.CloseAll();\r\n                            if (data.current.plate && data.current.props) {\r\n                                if (ESX.Game.IsSpawnPointClear({ x: 491.09, y: -1313.07, z: 29.26 }, 4.0)) {\r\n                                    emitNet('mx-vehiclekey:TakeImpound', {\r\n                                        plate: data.current.plate,\r\n                                        props: data.current.props\r\n                                    });\r\n                                }\r\n                                else {\r\n                                    ESX.ShowNotification('There is another vehicle at the spawn point.');\r\n                                }\r\n                            }\r\n                        }, function (data, menu) {\r\n                            menu.close();\r\n                        });\r\n                    }\r\n                    else {\r\n                        ESX.ShowNotification(\"There is no vehicle in the impounds.\");\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n    yield (0, s_lb_1.Wait)(sleep);\r\n}));\r\nonNet('mx-vehiclekey:UseKey', (item) => __awaiter(void 0, void 0, void 0, function* () {\r\n    const ped = PlayerPedId();\r\n    const veh = GetVehiclePedIsIn(ped, false);\r\n    const meta = ESX.GetPlayerData().inventory[item.slot].metadata;\r\n    if (veh != 0) {\r\n        if ((0, s_lb_1.SplitSpaces)(meta.plate) == (0, s_lb_1.SplitSpaces)(GetVehicleNumberPlateText(veh))) {\r\n            if (GetIsVehicleEngineRunning(veh)) {\r\n                SetVehicleEngineOn(veh, false, true, true);\r\n                ESX.ShowNotification('Vehicle engine is off.');\r\n            }\r\n            else {\r\n                SetVehicleEngineOn(veh, true, true, true);\r\n                ESX.ShowNotification('Vehicle engine is on.');\r\n            }\r\n        }\r\n        else {\r\n            ESX.ShowNotification('The key does not belong to this car.');\r\n        }\r\n    }\r\n    else {\r\n        const vehicle = yield ClosestVehicle(5);\r\n        if (vehicle) {\r\n            if ((0, s_lb_1.SplitSpaces)(meta.plate) == (0, s_lb_1.SplitSpaces)(GetVehicleNumberPlateText(vehicle))) {\r\n                const dict = \"anim@mp_player_intmenu@key_fob@\";\r\n                RequestAnimDict(dict);\r\n                while (true) {\r\n                    yield (0, s_lb_1.Wait)(100);\r\n                    if (HasAnimDictLoaded(dict)) {\r\n                        break;\r\n                    }\r\n                }\r\n                TaskPlayAnim(PlayerPedId(), dict, \"fob_click_fp\", 8.0, 8.0, -1, 48, 0, false, false, false);\r\n                if (GetVehicleDoorLockStatus(vehicle) == 1) {\r\n                    SetVehicleDoorsLocked(vehicle, 2);\r\n                    PlayVehicleDoorCloseSound(vehicle, 1);\r\n                    ESX.ShowNotification('The vehicle is locked.');\r\n                }\r\n                else if (GetVehicleDoorLockStatus(vehicle) == 2) {\r\n                    SetVehicleDoorsLocked(vehicle, 1);\r\n                    PlayVehicleDoorOpenSound(vehicle, 0);\r\n                    ESX.ShowNotification('The vehicle is unlocked.');\r\n                }\r\n                yield (0, s_lb_1.Wait)(100);\r\n                SetVehicleLights(vehicle, 2);\r\n                yield (0, s_lb_1.Wait)(200);\r\n                SetVehicleLights(vehicle, 1);\r\n                yield (0, s_lb_1.Wait)(200);\r\n                SetVehicleLights(vehicle, 2);\r\n                yield (0, s_lb_1.Wait)(200);\r\n                SetVehicleLights(vehicle, 1);\r\n                yield (0, s_lb_1.Wait)(200);\r\n                SetVehicleLights(vehicle, 2);\r\n                yield (0, s_lb_1.Wait)(200);\r\n                SetVehicleLights(vehicle, 0);\r\n            }\r\n            else {\r\n                ESX.ShowNotification('The key does not belong to this car.');\r\n            }\r\n        }\r\n        else {\r\n            ESX.ShowNotification('No vehicles nearby. ');\r\n        }\r\n    }\r\n}));\r\nonNet('mx-vehiclekey:AddWhitelistVeh', function (veh) {\r\n    if (!veh) {\r\n        return false;\r\n    }\r\n    HotwireVeh[veh] = true;\r\n});\r\nconst CreateBlip = () => {\r\n    const blipData = [\r\n        {\r\n            name: 'Create a new key',\r\n            coords: { x: 408.95, y: -1622.81, z: 29.29 },\r\n            sprite: 100,\r\n            color: 2\r\n        },\r\n        {\r\n            name: 'Impounds',\r\n            coords: { x: 483.75, y: -1312.15, z: 29.21 },\r\n            sprite: 100,\r\n            color: 2\r\n        }\r\n    ];\r\n    for (const data of blipData) {\r\n        const blip = AddBlipForCoord(data.coords.x, data.coords.y, data.coords.z);\r\n        SetBlipSprite(blip, data.sprite);\r\n        SetBlipScale(blip, 0.8);\r\n        SetBlipColour(blip, data.color);\r\n        SetBlipAsShortRange(blip, true);\r\n        BeginTextCommandSetBlipName('STRING');\r\n        AddTextComponentSubstringPlayerName(data.name);\r\n        EndTextCommandSetBlipName(blip);\r\n    }\r\n};\r\nCreateBlip();\r\nonNet('mx-vehiclekey:CreateVehicleGps', function (item) {\r\n    const meta = ESX.GetPlayerData().inventory[item.slot].metadata;\r\n    if (meta && meta.plate) {\r\n        ESX.TriggerServerCallback('mx-vehiclekey:GetVehicleFromPlate', function (vehicle) {\r\n            if (vehicle && vehicle.data) {\r\n                const coords = {\r\n                    x: vehicle.data.coords.x,\r\n                    y: vehicle.data.coords.y,\r\n                    z: vehicle.data.coords.z,\r\n                };\r\n                emit('mx-vehiclekey:UseVehicleGps', coords);\r\n            }\r\n            else {\r\n                ESX.ShowNotification('Vehicle inform not found.');\r\n            }\r\n        }, meta.plate || '');\r\n    }\r\n    else {\r\n        const veh = GetVehiclePedIsIn(PlayerPedId(), false);\r\n        if (veh != 0) {\r\n            const plate = GetVehicleNumberPlateText(veh);\r\n            if (plate) {\r\n                emitNet('mx-vehiclekey:UpdateVehicleGps', item, plate);\r\n                ESX.ShowNotification('Gps connected to vehicle');\r\n            }\r\n        }\r\n        else {\r\n            ESX.ShowNotification('You are not in a vehicle.');\r\n        }\r\n    }\r\n});\r\nonNet('mx-vehiclekey:UseVehicleGps', (coords) => __awaiter(void 0, void 0, void 0, function* () {\r\n    ESX.ShowNotification('Marked on gps');\r\n    let alpha = 250;\r\n    let blip = AddBlipForRadius(coords.x + (yield (0, s_lb_1.MathRandom)(30, 70)), coords.y + (yield (0, s_lb_1.MathRandom)(10, 50)), coords.z, 300.0);\r\n    SetBlipSprite(blip, 9);\r\n    SetBlipColour(blip, 1);\r\n    SetBlipAsShortRange(blip, true);\r\n    SetBlipAlpha(blip, alpha);\r\n    BeginTextCommandSetBlipName('STRING');\r\n    AddTextComponentSubstringPlayerName('Vehicle Location');\r\n    EndTextCommandSetBlipName(blip);\r\n    let time = 7;\r\n    while (true) {\r\n        yield (0, s_lb_1.Wait)(time * 1000);\r\n        time = time - 1;\r\n        alpha = alpha - 70;\r\n        SetBlipAlpha(blip, alpha);\r\n        if (time == 0) {\r\n            RemoveBlip(blip);\r\n        }\r\n    }\r\n}));\r\n\n\n//# sourceURL=webpack://vehiclekey/./src/client/client.ts?")},"./src/server/s_lb.ts":function(__unused_webpack_module,exports){eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Execute = exports.Fetch = exports.Wait = exports.MathRandom = exports.ArrayToVec3 = exports.IsJson = exports.SplitSpaces = exports.CalculateDistance = void 0;\r\nconst CalculateDistance = (p1, p2) => __awaiter(void 0, void 0, void 0, function* () {\r\n    var a = p2.x - p1.x;\r\n    var b = p2.y - p1.y;\r\n    var c = p2.z - p1.z;\r\n    return Math.sqrt(a * a + b * b + c * c);\r\n});\r\nexports.CalculateDistance = CalculateDistance;\r\nfunction SplitSpaces(a) {\r\n    a = String(a);\r\n    return a.split(' ').join('');\r\n}\r\nexports.SplitSpaces = SplitSpaces;\r\nfunction IsJson(str) {\r\n    try {\r\n        JSON.parse(str);\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\nexports.IsJson = IsJson;\r\nfunction ArrayToVec3(coords) {\r\n    return {\r\n        x: coords[0],\r\n        y: coords[1],\r\n        z: coords[2],\r\n    };\r\n}\r\nexports.ArrayToVec3 = ArrayToVec3;\r\nconst MathRandom = (min, max) => __awaiter(void 0, void 0, void 0, function* () {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n});\r\nexports.MathRandom = MathRandom;\r\nconst Wait = (ms) => new Promise(res => setTimeout(res, ms));\r\nexports.Wait = Wait;\r\nconst Fetch = (query, params) => __awaiter(void 0, void 0, void 0, function* () {\r\n    let res = {};\r\n    let finishedQuery = false;\r\n    globalThis.exports['mysql-async'].mysql_fetch_all(query, params, function (result) {\r\n        finishedQuery = true;\r\n        res = result;\r\n    });\r\n    while (!finishedQuery) {\r\n        yield (0, exports.Wait)(100);\r\n    }\r\n    return res;\r\n});\r\nexports.Fetch = Fetch;\r\nconst Execute = (query, params) => __awaiter(void 0, void 0, void 0, function* () {\r\n    let res = {};\r\n    let finishedQuery = false;\r\n    globalThis.exports['mysql-async'].mysql_execute(query, params, function (result) {\r\n        finishedQuery = true;\r\n        res = result;\r\n    });\r\n    while (!finishedQuery) {\r\n        yield (0, exports.Wait)(100);\r\n    }\r\n    return res;\r\n});\r\nexports.Execute = Execute;\r\n\n\n//# sourceURL=webpack://vehiclekey/./src/server/s_lb.ts?")},"./src/server/config.json":module=>{eval('module.exports = JSON.parse(\'{"impound_perm":["police","ambulance"]}\');\n\n//# sourceURL=webpack://vehiclekey/./src/server/config.json?')}},__webpack_module_cache__={};function __webpack_require__(e){var r=__webpack_module_cache__[e];if(void 0!==r)return r.exports;var n=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e].call(n.exports,n,n.exports,__webpack_require__),n.exports}var __webpack_exports__=__webpack_require__("./src/client/client.ts")})();